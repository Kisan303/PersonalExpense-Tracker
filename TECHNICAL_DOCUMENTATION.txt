
# Expense Tracker Application - Technical Documentation

## 1. System Architecture

### 1.1 Frontend (React + TypeScript)
- Location: /client/src/
- Framework: React with TypeScript
- UI Components: shadcn/ui
- State Management: React Query
- Styling: TailwindCSS
- Charts: Recharts
- Export Utilities: jsPDF, CSV

### 1.2 Backend (Express + MongoDB)
- Location: /server/
- Framework: Express.js
- Database: MongoDB Atlas
- Schema Validation: Zod
- API Endpoints: REST

### 1.3 Shared
- Location: /shared/
- Contains: TypeScript interfaces and schemas
- Purpose: Type sharing between frontend and backend

## 2. Database Schema

### 2.1 Collections
1. users
   - id: serial (primary key)
   - username: string (unique)
   - password: string

2. expenses
   - id: serial (primary key)
   - description: string
   - amount: number
   - category: string (enum)
   - date: string (YYYY-MM-DD)
   - notes: string (optional)
   - userId: number (foreign key)
   - createdAt: timestamp

## 3. API Endpoints

### 3.1 Expenses API
- GET /api/expenses
  - Purpose: Fetch all expenses
  - Filters: startDate, endDate, category
  
- GET /api/expenses/:id
  - Purpose: Fetch single expense
  
- POST /api/expenses
  - Purpose: Create new expense
  
- PUT /api/expenses/:id
  - Purpose: Update existing expense
  
- DELETE /api/expenses/:id
  - Purpose: Delete expense

### 3.2 Statistics API
- GET /api/expenses/stats/summary
  - Purpose: Get expense statistics
  - Returns: Total, average, highest expense, categories breakdown

## 4. Frontend Components

### 4.1 Pages
- Dashboard (/pages/Dashboard.tsx)
  - Summary cards
  - Charts
  - Recent expenses
  
- Expenses (/pages/Expenses.tsx)
  - Expense table
  - Filters
  - Export options

### 4.2 Core Components
- ExpenseForm: Add/Edit expense form
- ExpenseTable: Display expenses in table format
- CategoryChart: Bar chart for categories
- PieChart: Distribution visualization
- DateRangeFilter: Date-based filtering

## 5. Features

### 5.1 Expense Management
- Create, read, update, delete expenses
- Categorization
- Date tracking
- Notes and descriptions

### 5.2 Data Visualization
- Category-wise breakdown
- Spending trends
- Interactive charts

### 5.3 Export Capabilities
- PDF export with formatting
- CSV export for data analysis
- Custom date range selection

## 6. Local Development Setup

### 6.1 Prerequisites
- Node.js (v20 or later)
- MongoDB Atlas account
- Git

### 6.2 Environment Configuration
Required environment variables (.env):
```
MONGODB_URI=mongodb+srv://<username>:<password>@<cluster>.mongodb.net/app
```

### 6.3 Installation Steps
1. Clone repository
2. Install dependencies: npm install
3. Set up .env file
4. Start development server: npm run dev

### 6.4 Build & Production
- Build command: npm run build
- Production start: npm run start
- Default port: 5000

## 7. Security Considerations

### 7.1 Data Validation
- Input validation using Zod schemas
- MongoDB query sanitization
- Type checking with TypeScript

### 7.2 Error Handling
- Structured error responses
- Client-side validation
- Server-side validation
- Database error handling

## 8. Performance Optimizations

### 8.1 Frontend
- React Query for caching
- Lazy loading of components
- Optimized chart rendering
- Debounced filters

### 8.2 Backend
- MongoDB indexing
- Query optimization
- Connection pooling
- Response caching

## 9. Code Structure

### 9.1 Directory Layout
```
├── client/               # Frontend React application
│   ├── src/
│   │   ├── components/  # React components
│   │   ├── pages/       # Page components
│   │   ├── utils/       # Utility functions
│   │   └── lib/         # Shared libraries
├── server/              # Backend Express server
│   ├── routes.ts        # API routes
│   └── mongodb.ts       # Database configuration
└── shared/              # Shared TypeScript types
```

### 9.2 Key Files
- server/index.ts: Main server entry
- client/src/App.tsx: Main React entry
- shared/schema.ts: Shared type definitions

## 10. Testing & Maintenance

### 10.1 Development Workflow
1. Local development
2. Code review
3. Testing
4. Deployment

### 10.2 Monitoring
- Server logs
- MongoDB Atlas monitoring
- Error tracking
- Performance metrics

## 11. Dependencies

### 11.1 Frontend
- react
- @tanstack/react-query
- recharts
- tailwindcss
- shadcn/ui
- jspdf
- wouter

### 11.2 Backend
- express
- mongodb
- zod
- typescript

## 12. Future Considerations

### 12.1 Potential Improvements
- Authentication system
- Multi-currency support
- Advanced reporting
- Mobile application
- Data backup system
- Automated testing

### 12.2 Scalability
- Database sharding
- Load balancing
- Caching strategies
- API rate limiting
